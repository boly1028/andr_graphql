# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ADOPQuery {
  adoTypes: [String!]!
  package(adoType: String!): AdoPackage!
}

type ADOPSchema {
  execute: String!
  instantiate: String!
  query: String!
  receive: ADOPSchemaReceive
}

type ADOPSchemaReceive {
  cw20: String
  cw721: String
}

type AccountsQuery {
  assets(adoType: AdoType, limit: Int = 10, offset: Int = 0, walletAddress: String!): [AssetResult!]!
  wallets: String!
}

type AdoPackage {
  name: String!
  schemas: ADOPSchema!
}

type AdoQuery {
  app(address: String!): AppAdo!
  auction(address: String!): AuctionAdo!
  cw721(address: String!): CW721Ado!
}

enum AdoType {
  AddressList
  App
  Auction
  CW20
  CW20Staking
  CW721
  CW721Bids
  CW721Timelock
  Crowdfund
  Factory
  Gumball
  Lockdrop
  Marketplace
  MerkleAirdrop
  NftStaking
  Primitive
  RateLimitingWithdrawals
  Rates
  Receipt
  Splitter
  Timelock
  Unknown
  Vault
  Vesting
  WeightedDistributionSplitter
  WeightedSplitter
  WrappedCW721
}

type Agreement {
  amount: AgreementAmount
  purchaser: String
}

type AgreementAmount {
  raw: Coin
}

type AllNftInfo {
  access: NftOwnerInfo
  info: NftInfo
}

enum AndrOrderBy {
  Asc
  Desc
}

type AndrQuery implements IWasmContract {
  address: String!
  admin: String
  blockHeightUponCreation: Int!
  codeId: Int!
  creator: String!
  ibcPortId: String
  isOperator(address: String!): Boolean!
  label: String!
  operators: [String!]!
  originalPublisher: String!
  owner: String!
  queries_expected: [String!]
  type: String!
  version: String!
}

input AndrSearchOptions {
  limit: Int = 10
  orderBy: AndrOrderBy = Asc
  startAfter: Int = 0
}

type AppAdo implements IBaseAdoQuery {
  address: String!
  addresses: [AppComponentAddress!]
  admin: String @deprecated(reason: "Moved to `andr` query resolver, use `admin` field on `andr` to resolve this query.")
  andr: AndrQuery!
  codeId: Int @deprecated(reason: "Moved to `andr` query resolver, use `codeId` field on `andr` to resolve this query.")
  componentExists(name: String!): Boolean
  components: [AppComponent!]
  config: AppConfig
  creator: String @deprecated(reason: "Moved to `andr` query resolver, use `creator` field on `andr` to resolve this query.")
  getAddress(name: String!): String
  ibcPortId: String @deprecated(reason: "Moved to `andr` query resolver, use `ibcPortId` field on `andr` to resolve this query.")
  isOperator: Boolean @deprecated(reason: "Moved to `andr` query resolver, use `operators` field on `andr` to resolve this query.")
  label: String @deprecated(reason: "Moved to `andr` query resolver, use `label` field on `andr` to resolve this query.")
  operators: [String!] @deprecated(reason: "Moved to `andr` query resolver, use `operators` field on `andr` to resolve this query.")
  owner: String @deprecated(reason: "Moved to `andr` query resolver, use `owner` field on `andr` to resolve this query.")
  queries_expected: [String!] @deprecated(reason: "Moved to `andr` query resolver, use `queries_expected` field on `andr` to resolve this query.")
  type: String!
}

type AppComponent {
  address: String
  ado_type: String!
  instantiate_msg: String!
  name: String!
}

type AppComponentAddress {
  address: String!
  name: String!
}

type AppConfig {
  name: String!
  owner: String!
}

type AssetResult {
  address: String!
  adoType: String!
  appContract: String
  chainId: String
  components(componentType: AdoType, limit: Int = 10, offset: Int = 0): [Component!]
  instantiateHash: String
  instantiateHeight: Int
  lastUpdatedHash: String
  lastUpdatedHeight: Int
  owner: String!
}

type AuctionAdo implements IBaseAdoQuery {
  address: String!
  admin: String @deprecated(reason: "Moved to `andr` query resolver, use `admin` field on `andr` to resolve this query.")
  andr: AndrQuery!
  auctionIDs(tokenAddress: String!, tokenId: String!): AuctionIDsResponse
  auctionInfosForAddress(tokenAddress: String!): AuctionInfosForAddressResponse
  auctionState(auctionId: Float!): AuctionStateResponse
  bids(auctionId: Float!): BidsResponse
  codeId: Int @deprecated(reason: "Moved to `andr` query resolver, use `codeId` field on `andr` to resolve this query.")
  creator: String @deprecated(reason: "Moved to `andr` query resolver, use `creator` field on `andr` to resolve this query.")
  ibcPortId: String @deprecated(reason: "Moved to `andr` query resolver, use `ibcPortId` field on `andr` to resolve this query.")
  isOperator(address: String!): Boolean! @deprecated(reason: "Moved to `andr` query resolver, use `isOperator` field on `andr` to resolve this query.")
  label: String @deprecated(reason: "Moved to `andr` query resolver, use `label` field on `andr` to resolve this query.")
  latestAuctionState(tokenAddress: String!, tokenId: String!): AuctionStateResponse
  operators: [String!]! @deprecated(reason: "Moved to `andr` query resolver, use `operators` field on `andr` to resolve this query.")
  owner: String! @deprecated(reason: "Moved to `andr` query resolver, use `owner` field on `andr` to resolve this query.")
  queries_expected: [String!] @deprecated(reason: "Moved to `andr` query resolver, use `queries_expected` field on `andr` to resolve this query.")
  type: String!
}

type AuctionIDsResponse {
  auction_ids: [Int!]
}

type AuctionInfosForAddressResponse {
  auction_ids: [Int!]
  token_address: String
  token_id: String
}

type AuctionStateResponse {
  auction_id: Int
  coin_denom: String
  end_time: JSON
  high_bidder_addr: String
  high_bidder_amount: Int
  is_cancelled: Boolean
  min_bid: Int
  start_time: JSON
  whitelist: JSON
}

type Bech32Config {
  bech32PrefixAccAddr: String!
  bech32PrefixAccPub: String!
  bech32PrefixConsAddr: String!
  bech32PrefixConsPub: String!
  bech32PrefixValAddr: String!
  bech32PrefixValPub: String!
}

type Bid {
  amount: Int!
  bidder: String!
  timestamp: JSON!
}

type BidsResponse {
  bids: [Bid!]
}

type Bip44 {
  coinType: String!
}

type CW721Ado {
  address: String!
  admin: String @deprecated(reason: "Moved to `andr` query resolver, use `admin` field on `andr` to resolve this query.")
  allNftInfo(includeExpired: Boolean!, tokenId: String!): AllNftInfo
  allOperators(includeExpired: Boolean!, options: AndrSearchOptions, owner: String!): [NftApproval!]
  allTokens(options: AndrSearchOptions): [String!]
  andr: AndrQuery!
  approval(includeExpired: Boolean!, spender: String!, tokenId: String!): NftApproval
  approvals(includeExpired: Boolean!, tokenId: String!): [NftApproval!]
  codeId: Int @deprecated(reason: "Moved to `andr` query resolver, use `codeId` field on `andr` to resolve this query.")
  contractInfo: NftContractInfo
  creator: String @deprecated(reason: "Moved to `andr` query resolver, use `creator` field on `andr` to resolve this query.")
  ibcPortId: String @deprecated(reason: "Moved to `andr` query resolver, use `ibcPortId` field on `andr` to resolve this query.")
  isArchived(tokenId: String!): Boolean
  isOperator: Boolean @deprecated(reason: "Moved to `andr` query resolver, use `operators` field on `andr` to resolve this query.")
  label: String @deprecated(reason: "Moved to `andr` query resolver, use `label` field on `andr` to resolve this query.")
  minter: String
  nftInfo(tokenId: String!): NftInfo
  numTokens: Int
  operators: [String!] @deprecated(reason: "Moved to `andr` query resolver, use `operators` field on `andr` to resolve this query.")
  owner: String @deprecated(reason: "Moved to `andr` query resolver, use `owner` field on `andr` to resolve this query.")
  ownerOf(includeExpired: Boolean!, tokenId: String!): NftOwnerInfo
  queries_expected: [String!] @deprecated(reason: "Moved to `andr` query resolver, use `queries_expected` field on `andr` to resolve this query.")
  searchTokens(attributes: [SearchAttribute!]): [NftInfo!]
  tokens(options: AndrSearchOptions, owner: String!): [String!]
  transferAgreement(tokenId: String!): TransferAgreement!
  type: String!
}

type ChainConfig {
  addressPrefix: String!
  blockExplorerAddressPages: [String!]!
  blockExplorerTxPages: [String!]!
  chainId: String!
  chainName: String!
  chainType: String!
  chainUrl: String!
  defaultFee: String!
  iconUrls: IconUrl!
  name: String!
  registryAddress: String!
}

type ChainConfigQuery {
  allConfigs: [ChainConfig!]!
  config(identifier: String!): ChainConfig!
}

type Coin {
  amount: String!
  denom: String!
}

type Component {
  address: String
  ado_type: String!
  instantiate_msg: String!
  name: String!
}

type Currency {
  coinDecimals: Int!
  coinDenom: String!
  coinGeckoId: String!
  coinMinimalDenom: String!
}

type GasPriceStep {
  average: Float!
  high: Float!
  low: Float!
}

interface IBaseAdoQuery {
  address: String!
  andr: AndrQuery!
  type: String!
}

interface IWasmContract {
  address: String!
  admin: String
  codeId: Int!
  creator: String!
  ibcPortId: String
  label: String!
  queries_expected: [String!]
}

type IconUrl {
  lg: String!
  sm: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type KeplrConfig {
  bech32Config: Bech32Config!
  bip44: Bip44!
  chainId: String!
  chainName: String!
  coinType: Int!
  currencies: [Currency!]!
  feeCurrencies: [Currency!]!
  gasPriceStep: GasPriceStep!
  rest: String!
  rpc: String!
  stakeCurrency: Currency!
}

type KeplrConfigQuery {
  allConfigs: [KeplrConfig!]!
  config(identifier: String!): KeplrConfig!
}

type MetadataAttribute {
  display_type: String
  trait_type: String!
  value: String!
}

type NftApproval {
  expires: JSON
  spender: String
}

type NftContractInfo {
  name: String
  symbol: String
}

type NftInfo {
  extension: TokenExtension
  tokenUri: String
}

type NftOwnerInfo {
  approvals: [NftApproval!]
  owner: String
}

type Query {
  ADO: AdoQuery!
  ADOP: ADOPQuery!
  accounts: AccountsQuery!
  app(address: String!): AppAdo! @deprecated(reason: "Moved to `ADO` query resolver, use `app` field on `ADO` to resolve this query.")
  assets(adoType: AdoType, limit: Int = 10, offset: Int = 0, walletAddress: String!): [AssetResult!]! @deprecated(reason: "Moved to `Accounts` query resolver, use `assets` field on `Accounts` to resolve this query.")
  auction(address: String!): AuctionAdo! @deprecated(reason: "Moved to `ADO` query resolver, use `auction` field on `ADO` to resolve this query.")
  chainConfigs: ChainConfigQuery!
  cw721(address: String!): CW721Ado! @deprecated(reason: "Moved to `ADO` query resolver, use `cw721` field on `ADO` to resolve this query.")
  keplrConfigs: KeplrConfigQuery!
  tx(chainId: String!): TxSearchResult!
  wasm(address: String!): WasmContract! @deprecated(reason: "Moved to `ADO` query resolver, use `wasm` field on `ADO` to resolve this query.")
}

input SearchAttribute {
  trait_type: String!
  value: String
}

type TokenExtension {
  animation_url: String
  attributes: [MetadataAttribute!]!
  description: String
  external_url: String
  image: String!
  image_data: String
  name: String!
  publisher: String!
  youtube_url: String
}

type TransferAgreement {
  agreement: Agreement
  tokenId: String
}

type TxEvent {
  attributes: [TxEventAttribute!]!
  type: String!
}

type TxEventAttribute {
  key: String!
  value: String!
}

type TxInfo {
  code: Int
  events: [TxEvent!]
  gasUsed: Int
  gasWanted: Int
  hash: String!
  height: Int!
  rawLog: String
  tx: JSON
  txLog: [TxLog!]
}

type TxLog {
  events: [TxEvent!]!
}

type TxSearchResult {
  byAccount(maxHeight: Int, minHeight: Int, sentFromOrTo: String!): [TxInfo!]
  byContract(address: String!, maxHeight: Int, minHeight: Int): [TxInfo!]
  byHash(hash: String!): TxInfo
  byHeight(height: Float!): [TxInfo!]
  byOwner(maxHeight: Int, minHeight: Int, walletAddress: String!): [TxInfo!]
  byTag(maxHeight: Int, minHeight: Int, tags: JSON!): [TxInfo!]
  chainId: String!
}

type WasmContract implements IWasmContract {
  address: String!
  admin: String
  codeId: Int!
  creator: String!
  ibcPortId: String
  label: String!
  queries_expected: [String!]
  queryMsg(message: JSON!): JSON
}
